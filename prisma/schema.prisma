generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  role               Role                 @default(USER)
  createdAt          DateTime             @default(now())
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  updatedAt          DateTime             @updatedAt
  accounts           Account[]
  jobs               Job[]
  sessions           Session[]
  teams              Team[]               @relation("TeamToUser")
  invites            Invites[]
  adminOf            Team[]               @relation("TeamAdmin")
  candidateSubmitted CandidateSubmitted[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String    @id @default(cuid())
  name        String    @unique
  jobs        Job[]
  clients     Client[]  @relation("ClientToTeam")
  users       User[]    @relation("TeamToUser")
  invitesSent Invites[]
  admin       User[]    @relation("TeamAdmin")
}

model Invites {
  id           String @id @default(cuid())
  from         Team   @relation(fields: [teamId], references: [id])
  teamId       String
  to           User   @relation(fields: [inviteeEmail], references: [email])
  inviteeEmail String

  @@unique([teamId, inviteeEmail])
}

model Job {
  id             String               @id @default(cuid())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  role           String
  clientName     String
  location       String?
  salaryMin      Int
  salaryMax      Int
  jobDescription String
  remarks        String?
  jobOwnerEmail  String?
  teamId         String
  client         Client               @relation(fields: [clientName], references: [name])
  createdBy      User?                @relation(fields: [jobOwnerEmail], references: [email])
  team           Team                 @relation(fields: [teamId], references: [id])
  status         JobStatus            @default(NORMAL)
  active         Active               @default(ACTIVE)
  candidates     CandidateSubmitted[]
  

  // interviews     Interview[]
}

model Client {
  id    String @id @default(cuid())
  name  String @unique
  jobs  Job[]
  teams Team[] @relation("ClientToTeam")
}

model CandidateSubmitted {
  jobId       String
  candidateName String
  profileLink String?
  submittedBy String
  job         Job       @relation(fields: [jobId], references: [id])
  user        User      @relation(fields: [submittedBy], references: [email])

  @@unique([jobId, candidateName, submittedBy])
}

// model Interview {
//   id          String    @id @default(cuid())
//   job         Job       @relation(fields: [jobId], references: [id])
//   jobId       String
//   candidate   Candidate @relation(fields: [candidateId], references: [id])
//   candidateId String
//   dateTime    DateTime
//   stage       Int

//   @@unique([jobId, candidateId, dateTime])
// }

enum Role {
  USER
  ADMIN
}

enum JobStatus {
  URGENT
  NORMAL
}

enum Active {
  ACTIVE
  CLOSED
}
