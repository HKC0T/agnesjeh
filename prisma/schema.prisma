// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role    Role     @default(USER)
teams Team[]
  accounts      Account[]
  sessions      Session[]
  jobs  Job[] 
  }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Team {
  id      String    @id @default(cuid())
  name   String   @unique
  users User[]
  jobs Job[]
  clients Client[]
  //add client
}

model Job {
  id         String    @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy User? @relation(fields: [jobOwnerEmail], references: [email])
  jobOwnerEmail String?
  role      String
  client Client @relation(fields: [clientName], references: [name])
  clientName String 
  location String?
  salaryMin Int 
  salaryMax Int
  jobDescription String
  remarks String? 
  team Team @relation(fields: [teamId], references: [id])
  teamId String

}
//add contract type, status, priority

model Client {
  id    String    @id @default(cuid())
  name  String @unique
  jobs Job[]
  teams Team[]
}
//change it to 1-n
//add teams

enum Role {
  USER
  ADMIN
}

